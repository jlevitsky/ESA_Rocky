% Rocky_closed_loop_poles_23.m
%
% 1) Symbolically calculates closed loop transfer function of a disturbannce
% rejection PI control system for Rocky. 
% No motor model (M =1). With motor model (1st order TF)
%
% 2) Specify location of (target)poles based on desired reponse. The number of
% poles = denominator polynomial of closed loop TF
%
% 3) Extract the closed loop denomiator poly and set = polynomial of target
% poles
%
% 4) Solve for Ki, Kp  to match coefficients of polynomials. In general,
% this will be underdefined and will not be able to place poles in exact
% locations. In this, the control constants can be found exactly 
%
% 5) Plot impulse and step response to see closed-loop behavior. 
%
% based on code by SG. last modified 2/25/23 CL

clear all; 
close all;

syms s a_r a_l b_l b_r tau_r tau_l leff g   % define symbolic variables

Hvtheta = -s/leff/(s^2-g/leff);       % TF from velocity to angle of pendulum

K = Kp + Ki/s;                  % TF of the PI angle controller
                          
M_r = K/tau_r/(s + 1/tau_r);          % TF of motor (1st order model) 
M_l = K/tau_l/(s + 1/tau_l)
% closed loop transfer function from disturbance d(t)totheta(t)
Hcloop_R = 1/(1-Hvtheta*M_r*K)    % use this for no motor feedback
Hcloop_L = 1/(1-Hvtheta*M_l*K)

pretty(simplify(Hcloop_R))       % to display the total transfer function
pretty(simplify(Hcloop_L))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Substitute parameters and solve
% system parameters (Insert calculated values here)
g = 9.81;
leff = 0.41994844287198841974773330815194;   %effective length 
a_r = 13.19;             %nominal motor parameters
a_l = 12.96;
b_r = 0.003267;          %nominal motor parameters
b_l = 0.003352;
tau_l = 1/a_l;
tau_r = 1/b_l;
%%%%%%%%%%%%
Hcloop_sub_L = subs(Hcloop_L) % sub parameter values into Hcloop for left motor
Hcloop_sub_R = subs(Hcloop_R) % sub parameter values into Hcloop for right motor
%%%%%%%%%%%%%
% specify locations of the target poles,
% choose # based on order of Htot denominator (Need to find #of poles and specify poles)
% e.g., want some oscillations, want fast decay, etc. 
p1 = ;    % dominant pole pair
p2 = ;    % dominant pole pair 
p3 = ;
% target characteristic polynomial
% if motor model (TF) is added, order of polynomial will increases
tgt_char_poly = (s-p1)*(s-p2)*(s-p3)    %We need to determine this value
npoly = 3                               %We need to determine this value

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% get the denominator from Hcloop_sub
[n d] = numden(Hcloop_sub_L , Hcloop_sub_R)

% find the coefficients of the denominator polynomial TF
coeffs_denom = coeffs(d, s)

% divide though the coefficient of the highest power term
coeffs_denom = coeffs(d, s)/(coeffs_denom(end))

% find coefficients of the target charecteristic polynomial
coeffs_tgt = coeffs(tgt_char_poly, s)

% solve the system of equations setting the coefficients of the
% polynomial in the target to the actual polynomials
solutions = solve(coeffs_denom(1:npoly-1) == coeffs_tgt(1:npoly-1),  Kp, Ki)

% display the solutions as double precision numbers
Kp = double(solutions.Kp)
Ki = double(solutions.Ki)

% reorder coefficients for the check polynomial 
for ii = 1:length(coeffs_denom)
    chk_coeffs_denom(ii) = coeffs_denom(length(coeffs_denom) + 1 - ii);
end
closed_loop_poles = vpa (roots(subs(chk_coeffs_denom)), npoly )


% Plot impulse response of closed-loop system
    TFstring = char(subs(Hcloop));
    % Define 's' as transfer function variable
    s = tf('s');
    % Evaluate the expression
    eval(['TFH = ',TFstring]);
    figure (1)
    impulse(TFH);   %plot the impulse reponse
    figure(2)
    step(TFH)       %plot the step response
